#include <iostream>

using namespace std;

class Singleton {
   static Singleton *instance;
   int data;

   // Private constructor so that no objects can be created.
   Singleton() {
      data = 0;
   }

   public:
   static Singleton *getInstance() {
      if (!instance){
        cout<<"creating instance"<<endl;
        instance = new Singleton;
      }
      return instance;
   }

   int getData() {
      return this -> data;
   }

   void setData(int data) {
      this -> data = data;
   }
};

//Initialize pointer to zero so that it can be initialized in first call to getInstance
Singleton *Singleton::instance = NULL;

int main(){

    Singleton *s = s->getInstance();
    cout << s->getData() << endl;
    s->setData(100);
    cout << s->getData() << endl;
    //Test case 2
    Singleton *s1 = s1->getInstance();
    cout << s1->getData() << endl;
    //Test case 3
    Singleton *s2 = s2->getInstance();
    s2->setData(00);
    cout << s2->getData() << endl;
    cout << s->getData() << endl;
//    Singleton SS;
    return 0;
}
